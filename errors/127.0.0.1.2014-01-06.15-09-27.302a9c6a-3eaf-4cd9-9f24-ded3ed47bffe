(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Rows'"
p3
sS'layer'
p4
S'/Users/adin/Work/SIRI/TimeClock/siri/applications/siriadmin/controllers/mentorTrack.py'
p5
sS'code'
p6
S'# coding: utf8\n# try something like\ndef index(): return dict(message="hello from mentorTrack.py")\n\ndef projects():\n\tcount = db.mentorTrack_projects.project_name.count()\n\tprojects = db(db.mentorTrack_projects.project_name==db.siri_projects.id).select(db.siri_projects.name, count, groupby=db.mentorTrack_projects.project_name, orderby=db.siri_projects.name)\n\tmilestones = db(db.mentorTrack_projects.project_name==db.siri_projects.id).select(orderby=db.siri_projects.name)#, groupby=db.mentorTrack_projects.project_name)\n\n\tuserAlias = db.auth_user.with_alias(\'mentee_id\')\n\tmentorAlias = db.auth_user.with_alias(\'mentor_id\')\n\tmentorTrack_mentees = db((db.mentorTrack_mentees.project_name==db.siri_projects.id)&\n\t\t(db.mentorTrack_mentees.user_id==userAlias.id)&\n\t\t(db.mentorTrack_mentees.mentor_id==mentorAlias.id)).select(orderby=db.mentorTrack_mentees.project_name)\n\n\tbuildProjectForm = SQLFORM(db.mentorTrack_projects).process(next=URL(\'projects\'))\n\tassignMentorTrackForm = SQLFORM(db.mentorTrack_mentees).process(next=URL(\'projects\'))\n\treturn locals()\n\n\ndef mentees():\n\n\treturn locals()\n\n\ndef editEntries():\n\t"""\n\tdb.define_table(\'mentorTrack_projects\',\n    Field(\'project_name\', \'reference siri_projects\', requires=IS_IN_DB(db, db.siri_projects.id, \'%(name)s\')),\n    Field(\'milemark\', \'string\')\n    )\n\ndb.define_table(\'mentorTrack_mentees\',\n    Field(\'user_id\', \'reference auth_user\', label=\'Mentee\', unique=True, requires=IS_IN_DB(db, db.auth_user.id, \'%(first_name)s %(last_name)s\')),\n    Field(\'mentor_id\', \'reference auth_user\', label=\'Mentor\', requires=IS_IN_DB(db, db.auth_user.id, \'%(first_name)s %(last_name)s\')),\n    Field(\'project_name\', \'reference siri_projects\', requires=IS_IN_DB(db, db.siri_projects.id, \'%(name)s\')),\n    format=\'%(user_id)s\'\n    #Field(\'project_id\', \'reference mentorTrack_projects\', requires=IS_IN_DB(db, db.mentorTrack_projects.id, \'%(project_name)%\'))\n    )\n\ndb.define_table(\'mentorTrack_data\',\n    Field(\'user_id\', \'reference auth_user\', label=\'Mentee\'),\n    Field(\'milemark\', \'reference mentorTrack_projects\', requires=IS_IN_DB(db, db.mentorTrack_projects.id, \'%(milemark)s\')),\n    Field(\'goal_date\', \'date\',requires = IS_DATE(format=\'%m/%d/%Y\')),\n    Field(\'acheived_date\', \'date\',requires = IS_DATE(format=\'%m/%d/%Y\'))\n    )\nmenteeFilter = db(db.auth_user.id==db.mentorTrack_mentees.user_id)\ndb.mentorTrack_data.user_id.requires = IS_IN_DB(menteeFilter,\'auth_user.id\',\'%(first_name)s %(last_name)s\')\n\n\t"""\n\treturn locals()\n\ndef personal():\n\tproject = db(db.mentorTrack_mentees.user_id == session.auth.user.id).select(db.mentorTrack_mentees.project_name)\n\tmilemark = db(db.mentorTrack_projects.project_name == project).select()\n\treturn locals()\n\n\nresponse._vars=response._caller(personal)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/Users/adin/Work/SIRI/TimeClock/siri/applications/siriadmin/controllers/mentorTrack.py", line 59, in <module>\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/adin/Work/SIRI/TimeClock/siri/applications/siriadmin/controllers/mentorTrack.py", line 55, in personal\n    milemark = db(db.mentorTrack_projects.project_name == project).select()\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 9958, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 2245, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1691, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1601, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1276, in EQ\n    self.expand(second, first.type))\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1376, in expand\n    return str(self.represent(expression,field_type))\n  File "/Users/adin/Work/SIRI/TimeClock/siri/gluon/dal.py", line 1830, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Rows\'\n'
p11
s.