(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Cannot compare timeclock.work_date >= None"
p3
sS'layer'
p4
S'/home/SIRI/web2py/applications/siri_admin/controllers/timeclock.py'
p5
sS'code'
p6
S'@auth.requires_login()\t\r\ndef employeedash():\r\n    """\r\n    this will become the index page\r\n    """\r\n    fields = [\'project\',\'work_date\',\'time_in\',\'time_out\',\'description\']\r\n    form = SQLFORM(db.timeclock, submit_button=\'Submit Hours\', fields=fields)\r\n    if form.process(onvalidation=calcHours).accepted:\r\n        response.flash = \'Thank you for submitting your time \' + str(form.vars.hours)\r\n    elif form.errors:\r\n        response.flash = \'There was an error on the form\'\r\n    else:\r\n        response.flash = \'Welcome to your dashboard \' + session.auth.user.first_name\r\n    response.title = session.auth.user.first_name + "\'s Dashboard"\r\n    response.subtitle = \'Add or review time clock submissions\'\r\n\r\n    query = db.timeclock.usr_id == session.auth.user.id\r\n    clockEntries = db(query).select(db.timeclock.ALL, orderby=~db.timeclock.work_date)\r\n    totalHours = 0\r\n    # TODO: this is totaling all hours not just the displayed hours\r\n    # for entry in clockEntries:\r\n    #     totalHours += float(entry.hours)\r\n    return dict(form=form, clockEntries=clockEntries, totalHours=totalHours)\r\n\r\n@auth.requires_login()\r\ndef addtime():\r\n    """\r\n    Allows a loggedin user to add an entry for time worked\r\n    """\r\n    form = SQLFORM(db.timeclock)\r\n    if form.process().accepted:\r\n        response.flash = \'Thank you for submitting your time\'\r\n    elif form.errors:\r\n        response.flash = \'There was an error on the form\'\r\n    else:\r\n        response.flash = \'Welcome \' + session.auth.user.first_name + \' your id is: \' + str(session.auth.user.id)\r\n    response.title = \'New Entry\'\r\n    response.subtitle = \'please fill out the form below\'\r\n    hoursTest = type(db.timeclock.time_in)\r\n    return dict(form=form, hoursTest=hoursTest)\r\n\r\n@auth.requires_login()\r\ndef displaytime():\r\n    """\r\n    Shows the entries for the user that is logged in\r\n    TODO: add a \'request change\' link for employees to request a change to an entry\r\n    """\r\n    payPeriods = 0\t\r\n    query = db.timeclock.usr_id == session.auth.user.id\r\n    grid = SQLFORM.grid(query, deletable=False, editable=False, create=False, orderby=~db.timeclock.work_date)\r\n\r\n    return dict(grid=grid)\r\n\r\n@auth.requires_login()\r\ndef processinvoices():\r\n    """\r\n    A view to process and export invoices or various clients\r\n    TODO: make it variable per client and per period via inputs of some type\r\n          have it call the gspread function\r\n          process a log of some sort\r\n          display a processing icon and confirmation message\r\n    """\r\n    \r\n    form=FORM(\'Invoice Details:\',\r\n              INPUT(_name=\'start\', _type=\'date\', requires=IS_NOT_EMPTY()),\r\n              INPUT(_name=\'end\', requires=IS_NOT_EMPTY()),\r\n              INPUT(_name=\'project\', requires=IS_NOT_EMPTY()),\r\n              INPUT(_type=\'submit\'))\r\n\r\n    if form.accepts(request,session):\r\n        response.flash = \'form accepted\'\r\n    elif form.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n    start = form.vars.start\r\n    end = form.vars.end\r\n    project = form.vars.project\r\n\r\n    if (type(start) != \'None\'):\r\n        query = (db.timeclock.work_date >= start) & (db.timeclock.work_date <= end) & (db.timeclock.project == project)\r\n    clockEntries = db(query).select(db.timeclock.ALL, orderby=~db.timeclock.work_date)\r\n\r\n    return dict(form=form, start=start, end=end, project=project)\r\n\r\ndef calcHours(form):\r\n    # TODO: make this ok for non 24 hour time\r\n    hourDiff = int(form.vars.time_out[0:2]) - int(form.vars.time_in[0:2])\r\n    minDiff = (int(form.vars.time_out[3:5]) - int(form.vars.time_in[3:5]))/60.0\r\n    form.vars.hours = hourDiff + minDiff\r\n\r\ndef gdatatest():\r\n    """\r\n    testing integration with Google\r\n    """\r\n\r\n    gemail = \'dawg3tt@gmail.com\'\r\n    gpwd = \'mol090901!\'\r\n\r\n    # ############ get docs list example #################################################\r\n    # # Create a client class which will make HTTP requests with Google Docs server.\r\n    # gdocsClient = gdata.docs.service.DocsService()\r\n    # # Authenticate using your Google Docs email address and password.\r\n    # gdocsClient.email = gemail\r\n    # gdocsClient.password = gpwd\r\n    # gdocsClient.source = \'SIRI Admin\'\r\n    # gdocsClient.ProgrammaticLogin()\r\n    # # Query the server for an Atom feed containing a list of your documents.\r\n    # docsFeed = gdocsClient.GetDocumentListFeed()\r\n    # ####################################################################################\r\n    \r\n    # return dict(docsFeed=docsFeed)\r\n\r\ndef gspreadtest():\r\n    clockEntries = db(db.timeclock.project == \'DDM\').select(db.timeclock.ALL, orderby=~db.timeclock.usr_id)\r\n\r\n    gc = gspread.login(\'dawg3tt@gmail.com\', \'mol090901!\')\r\n    ss = gc.open("web2py_tester")\r\n    wks = ss.sheet1\r\n    timeList = wks.range(\'A16:E30\')\r\n    for cell in timeList:\r\n        cell.value = \'\'\r\n    # wks.update_cells(timeList)\r\n    newks = ss.add_worksheet(title=\'clockEntries[0].usr_id\', rows="30", cols="6")\r\n    newks.update_cell(1,1, \'Invoice\')\r\n    copyRange = wks.range(\'A1:F30\')\r\n    newRange = newks.range(\'A1:F30\')\r\n    # for cell in newRange:\r\n    #     cell.value = copyRange.value\r\n    copyList = wks.get_all_values()\r\n    newks.update_cells(copyRange)\r\n\r\n    update = False\r\n    if update:\r\n        rate = 10\r\n        idx = 16\r\n        for entry in clockEntries:\r\n            wks.update_cell(idx, 1, entry.work_date)\r\n            wks.update_cell(idx, 2, entry.description)\r\n            wks.update_cell(idx, 3, entry.hours)\r\n            wks.update_cell(idx, 4, rate) #TODO: this should be replaced by a query for rate added by admin\r\n            wks.update_cell(idx, 5, rate*entry.hours)\r\n            idx += 1\r\n\r\n    return dict(\r\n        timeList=timeList, \r\n        clockEntries=clockEntries, \r\n        wks=wks,\r\n        newks=newks,\r\n        copyRange=copyRange, \r\n        copyList=copyList\r\n        )\r\n\r\n# def copyCells(values, newks):\r\n#     for row in values:\r\n#         for cell in rows:\r\n\nresponse._vars=response._caller(processinvoices)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/SIRI/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/SIRI/web2py/applications/siri_admin/controllers/timeclock.py", line 158, in <module>\n  File "/home/SIRI/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/SIRI/web2py/gluon/tools.py", line 3022, in f\n    return action(*a, **b)\n  File "/home/SIRI/web2py/applications/siri_admin/controllers/timeclock.py", line 82, in processinvoices\n    clockEntries = db(query).select(db.timeclock.ALL, orderby=~db.timeclock.work_date)\n  File "/home/SIRI/web2py/gluon/dal.py", line 9958, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/SIRI/web2py/gluon/dal.py", line 2245, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/SIRI/web2py/gluon/dal.py", line 1691, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/SIRI/web2py/gluon/dal.py", line 1601, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/SIRI/web2py/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/home/SIRI/web2py/gluon/dal.py", line 1228, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/SIRI/web2py/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/home/SIRI/web2py/gluon/dal.py", line 1228, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/SIRI/web2py/gluon/dal.py", line 1368, in expand\n    return op(first,**optional_args)\n  File "/home/SIRI/web2py/gluon/dal.py", line 1304, in GE\n    raise RuntimeError("Cannot compare %s >= None" % first)\nRuntimeError: Cannot compare timeclock.work_date >= None\n'
p11
s.